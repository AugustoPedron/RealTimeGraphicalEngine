#define NUM_LIGHTS 4

Texture2D shaderTexture : register(t0);
SamplerState SampleType : register(s0);

cbuffer LightColorBuffer
{
    float4 diffuseColor[NUM_LIGHTS];
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
    float3 lightPos[NUM_LIGHTS] : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float lightIntensity[NUM_LIGHTS];
    float4 colorSum;
    float4 color;
    int i;    

    // Initialize the sum of colors.
    colorSum = float4(0.0f, 0.0f, 0.0f, 1.0f);

    for(i=0; i<NUM_LIGHTS; i++)
    {
        // Calculate the different amounts of light on this pixel based on the positions of the lights.
        lightIntensity[i] = saturate(dot(input.normal, input.lightPos[i]));

        // Determine the diffuse color amount of each of the four lights.
        colorSum.rgb += diffuseColor[i].rgb * lightIntensity[i];
    }

    // Sample the pixel color from the texture using the sampler at this texture coordinate location and
    // multiply the texture pixel by the combination of all four light colors to get the final result.
    color = saturate(colorSum) * shaderTexture.Sample(SampleType, input.tex);

    return color;
}